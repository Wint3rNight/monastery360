# Generated by Django 4.2.5 on 2025-09-01 23:12

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the event', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the event')),
                ('short_description', models.CharField(help_text='Brief description for previews and listings', max_length=300)),
                ('event_type', models.CharField(choices=[('festival', 'Festival'), ('ceremony', 'Religious Ceremony'), ('teaching', 'Teaching/Discourse'), ('meditation', 'Meditation Session'), ('celebration', 'Celebration'), ('pilgrimage', 'Pilgrimage'), ('cultural', 'Cultural Event'), ('educational', 'Educational Program'), ('maintenance', 'Maintenance/Closure'), ('other', 'Other')], default='other', help_text='Type of event', max_length=20)),
                ('start_time', models.DateTimeField(help_text='Start date and time of the event')),
                ('end_time', models.DateTimeField(help_text='End date and time of the event')),
                ('is_all_day', models.BooleanField(default=False, help_text='Whether this is an all-day event')),
                ('recurrence_type', models.CharField(choices=[('none', 'No Recurrence'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly'), ('lunar', 'Based on Lunar Calendar')], default='none', help_text='How often this event recurs', max_length=20)),
                ('recurrence_end_date', models.DateField(blank=True, help_text='Last date for recurring events', null=True)),
                ('location_details', models.CharField(blank=True, help_text="Specific location within the monastery (e.g., 'Main Hall', 'Courtyard')", max_length=200)),
                ('is_public', models.BooleanField(default=True, help_text='Whether the public can attend this event')),
                ('requires_registration', models.BooleanField(default=False, help_text='Whether visitors need to register in advance')),
                ('max_participants', models.PositiveIntegerField(blank=True, help_text='Maximum number of participants (if limited)', null=True)),
                ('registration_deadline', models.DateTimeField(blank=True, help_text='Deadline for registration', null=True)),
                ('dress_code', models.CharField(blank=True, help_text='Dress code or special requirements', max_length=200)),
                ('entry_fee', models.CharField(default='Free', help_text='Entry fee or donation information', max_length=100)),
                ('language', models.CharField(default='Tibetan, English', help_text='Languages used during the event', max_length=100)),
                ('contact_person', models.CharField(blank=True, help_text='Contact person for inquiries', max_length=100)),
                ('contact_phone', models.CharField(blank=True, help_text='Contact phone number', max_length=20)),
                ('contact_email', models.EmailField(blank=True, help_text='Contact email address', max_length=254)),
                ('image', models.ImageField(blank=True, help_text='Event image or poster', upload_to='events/images/')),
                ('image_alt', models.CharField(blank=True, help_text='Alt text for the event image (accessibility)', max_length=200)),
                ('special_instructions', models.TextField(blank=True, help_text='Special instructions for attendees')),
                ('weather_dependent', models.BooleanField(default=False, help_text='Whether the event is weather dependent')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether to feature this event on the homepage')),
                ('is_cancelled', models.BooleanField(default=False, help_text='Whether this event has been cancelled')),
                ('cancellation_reason', models.TextField(blank=True, help_text='Reason for cancellation (if applicable)')),
                ('expected_attendance', models.PositiveIntegerField(blank=True, help_text='Expected number of attendees', null=True)),
                ('actual_attendance', models.PositiveIntegerField(blank=True, help_text='Actual number of attendees (post-event)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('monastery', models.ForeignKey(help_text='The monastery hosting this event', on_delete=django.db.models.deletion.CASCADE, related_name='events', to='core.monastery')),
            ],
            options={
                'ordering': ['start_time'],
                'indexes': [models.Index(fields=['start_time'], name='events_even_start_t_c2d277_idx'), models.Index(fields=['event_type'], name='events_even_event_t_a87b5c_idx'), models.Index(fields=['is_public'], name='events_even_is_publ_e2e10e_idx'), models.Index(fields=['monastery', 'start_time'], name='events_even_monaste_0945fe_idx')],
            },
        ),
    ]
